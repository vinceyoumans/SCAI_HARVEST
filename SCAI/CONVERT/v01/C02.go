package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"

	firebase "firebase.google.com/go"
	"google.golang.org/api/option"
)

type AutoGenerated struct {
	Nodes []struct {
		Node struct {
			Name             string `json:"name"`
			INDICATION       string `json:"INDICATION"`
			TermDescription  string `json:"Term description"`
			Q01CAT           string `json:"Q01_CAT"`
			SCORE            string `json:"SCORE"`
			SCOREDEFINITIONS string `json:"SCORE DEFINITIONS"`
			SCOREGRAPHIC     string `json:"SCORE_GRAPHIC"`
		} `json:"node"`
	} `json:"nodes"`
}

type NACSTable struct {
	Name             string   `json:"name"`
	INDICATION       string   `json:"indication"`
	TermDescription  []string `json:"termdescription"`
	Q01CAT           string   `json:"q01"`
	SCORE            string   `json:"score"`
	SCOREDEFINITIONS string   `json:"score_def"`
	SCOREGRAPHIC     string   `json:"score_graphic"`
}

func main() {

	var urlString = "http://nacs.scai-qit.org/nacs-table01-dump"
	var ts string
	var tss []string

	var n NACSTable
	var NS []NACSTable

	res, err := http.Get(urlString)
	if err != nil {
		log.Fatal(err)
	}
	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)

	var data AutoGenerated

	err = decoder.Decode(&data)

	if err != nil {
		fmt.Printf("%T\n%s\n%#v\n", err, err, err)
	}
	//  this may look messy, but I had some strange charachters
	// in the original php DB...  and I didn't feel like manually editing them.

	for i, track := range data.Nodes {
		fmt.Println("=========================")
		fmt.Println(i)
		fmt.Println(track)
		fmt.Println(track.Node.Name)
		fmt.Println("a-----------------------------")
		fmt.Println(track.Node.TermDescription)
		fmt.Println("b-----------------------------")
		fmt.Printf("%q\n", strings.Split(track.Node.TermDescription, "\n"))
		fmt.Println("bb-----------------------------")
		fmt.Println(strings.Replace(track.Node.TermDescription, "\n", "", -1))
		fmt.Println("b-----------------------------")
		fmt.Printf("%q\n", strings.Split(track.Node.TermDescription, "\n"))
		fmt.Println("c-----------------------------")
		fmt.Printf("%q\n", strings.Split(track.Node.TermDescription, " - "))
		fmt.Println("d-----------------------------")
		ts = strings.Replace(track.Node.TermDescription, "\n", "", -1)
		tss = strings.Split(ts, " - ")
		fmt.Printf("%q\n", tss)
		fmt.Println(len(tss))
		fmt.Println("ww-----------------------------")

		fmt.Println("---------   creat new n ------------")
		n.INDICATION = track.Node.INDICATION
		n.Name = track.Node.Name
		n.Q01CAT = track.Node.Q01CAT
		n.SCORE = track.Node.SCORE
		n.SCOREDEFINITIONS = track.Node.SCOREDEFINITIONS
		n.SCOREGRAPHIC = track.Node.SCOREGRAPHIC
		n.TermDescription = tss

		fmt.Println(n)
		fmt.Println(len(n.TermDescription))
		for i := 0; i <= len(n.TermDescription)-1; i++ {
			fmt.Println(n.TermDescription[i])
		}
		fmt.Println("---------   creat new nbbbbb ------------")

		fmt.Println("---------   append to array ------------")
		//append(ns, n)
		NS = append(NS, n)
		fmt.Println(len(NS))
		fmt.Println("---------   DOne append to array ------------")
	}

	fmt.Println("---------   PUSH ns to Firebase ------------")

	fmt.Println("===============================================")

	sa := option.WithCredentialsFile("./SQADMINSDK.json")
	app, err := firebase.NewApp(context.Background(), nil, sa)
	if err != nil {
		log.Fatal(err)
	}
	client2, err := app.Firestore(context.Background())
	if err != nil {
		log.Fatal(err)
	}

	for i := 0; i <= len(NS); i++ {
		_, err := client2.Collection("NONACSv01_table").Doc(NS[i].Name).Set(context.Background(), NS[i])
		if err != nil {
			log.Fatal(err)
		}
	}


	

}
